apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: inbound-request-filter
  namespace: default
spec:
  #workloadSelector:
    #labels:
    #  app: reviews
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                                 
              end

              function envoy_on_response(response_handle)
                                 
              end
  - applyTo: CLUSTER
    match:
      context: SIDECAR_INBOUND
    patch:
      operation: ADD
      value: # cluster specification
        connect_timeout: 0.5s
        name: debugger_cluster
        type: STRICT_DNS  # static
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: debugger_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: scenario-recorder.debugger.svc.cluster.local
                    port_value: 8888

---

apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: outbound-response-filter
  namespace: default
spec:
  #workloadSelector:
    #labels:
    #  app: reviews
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                local headers = request_handle:headers()
                
                -- TODO: here the relevant headers should be extracted and the rest should be parsed into a list
                local headersPrint = ""
                for key, value in pairs(headers) do
                  if key == ":authority" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":path" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":method" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":scheme" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-request-id" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-b3-traceid" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-b3-spanid" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-b3-parentspanid" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-source-service-name" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                end
                -- remove last characters like the last ,
                headersPrint = headersPrint .. "\"" .. "x-source-service-name" .. "\"" .. ":" ..  "\"" .. "mockService" .. "\"" .. ","
                headersPrint = headersPrint:sub(1,-2)

                -- create communication ID
                local random = math.random
                local function uuid()
                    local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
                    return string.gsub(template, '[xy]', function (c)
                        local v = (c == 'x') and random(0, 0xf) or random(8, 0xb)
                        return string.format('%x', v)
                    end)
                end

                local communicationId = uuid()
                local streamInfo = request_handle:streamInfo()
                streamInfo:dynamicMetadata():set("envoy.lua", "request.communicationId", communicationId)

                local communicationIdPrint = '\"x-communication-id\":\"' .. communicationId .. '\"'

                -- prepare Request Body            
                local requestBody = '\"body\":\"'
                local resBody = ""
                for chunk in request_handle:bodyChunks() do
                  if (chunk:length() > 0) then
                    resBody = resBody .. chunk:getBytes(0, chunk:length())
                  end
                end
                if resbody ~= nil then
                  resBody = resBody:gsub('\"','\\"')
                  requestBody = requestBody .. resBody
                end
                requestBody = requestBody .. "\""

                -- communication with scenario recorder
                if communicationId ~= nil then
                  local debugHeaders, debugBody = request_handle:httpCall(
                    "debugger_cluster",
                    {
                      [":method"] = "POST",
                      [":path"] = "/scenario/request",
                      [":authority"] = "scenario-recorder.debugger.svc.cluster.local",
                      ["Content-Type"] = "application/json"
                    },
                    "{" .. headersPrint .. "," .. communicationIdPrint .. "," .. requestBody .. "}",
                    5000,
                    true
                  ) 
                end              
              end

              function envoy_on_response(response_handle)
                local headers = response_handle:headers()
                
                -- TODO: here the relevant headers should be extracted and the rest should be parsed into a list
                local headersPrint = ""
                for key, value in pairs(headers) do
                  if key == ":status" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":content-type" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                end
                -- remove last characters like the last ,
                headersPrint = headersPrint:sub(1,-2)

                -- create communication ID
                local streamInfo = response_handle:streamInfo()
                local communicationId = streamInfo:dynamicMetadata():get("envoy.lua")["request.communicationId"]
                local communicationIdPrint = '\"x-communication-id\":\"' .. communicationId .. '\"'

                -- prepare Response Body            
                local responseBody = '\"body\":\"'
                local repBody = ""
                for chunk in response_handle:bodyChunks() do
                  if (chunk:length() > 0) then
                    repBody = repBody .. chunk:getBytes(0, chunk:length())
                  end
                end
                if repBody ~= nil then
                  repBody = repBody:gsub('\"','\\"')
                  responseBody = responseBody .. repBody
                end
                responseBody = responseBody .. "\""

                -- communication with scenario recorder
                if communicationId ~= nil then
                  local debugHeaders, debugBody = response_handle:httpCall(
                    "debugger_cluster",
                    {
                      [":method"] = "POST",
                      [":path"] = "/scenario/response",
                      [":authority"] = "scenario-recorder.debugger.svc.cluster.local",
                      ["Content-Type"] = "application/json"
                    },
                    "{" .. headersPrint .. "," .. communicationIdPrint .. "," .. responseBody .. "}",
                    5000,
                    true
                  )
                end
              end
  - applyTo: CLUSTER
    match:
      context: SIDECAR_OUTBOUND
    patch:
      operation: ADD
      value: # cluster specification
        connect_timeout: 0.5s
        name: debugger_cluster
        type: STRICT_DNS  # static
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: debugger_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: scenario-recorder.debugger.svc.cluster.local
                    port_value: 8888