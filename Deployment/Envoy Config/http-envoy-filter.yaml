apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: request-response-filter
  namespace: default
spec:
  workloadSelector:
    labels:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: ANY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                local headers = request_handle:headers()
                local headersMap = {}
                local headersPrint = "{"
                for key, value in pairs(headers) do
                  headersMap[key] = value
                  if key == ":authority" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":path" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":method" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == ":scheme" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-request-id" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-b3-traceid" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-b3-spanid" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                  if key == "x-b3-parentspanid" then
                    headersPrint = headersPrint .. "\"" .. key .. "\"" .. ":" ..  "\"" .. value .. "\"" .. ","
                  end
                end
                headersPrint = headersPrint:sub(1,-2) .. "}"                  
                local requestBody = ""
                for chunk in request_handle:bodyChunks() do
                  if (chunk:length() > 0) then
                    requestBody = requestBody .. chunk:getBytes(0, chunk:length())
                  end
                end
                if (requestBody == nil or requestBody == "") then
                  requestBody = "moin leider ist der Body null"
                end

                local traceid = headersMap["x-b3-traceid"]
                if traceid ~= nil then
                  request_handle:logCritical("traceID vorhanden")
                  local debugHeaders, debugBody = request_handle:httpCall(
                    "debugger_cluster",
                    {
                      [":method"] = "POST",
                      [":path"] = "/scenario/request/" .. traceid,
                      [":authority"] = "scenario-recorder.debugger.svc.cluster.local"
                    },
                    headersPrint,
                    5000)

                  for dkey, dvalue in pairs(debugHeaders) do
                    request_handle:logCritical("debug header: " .. dkey)
                    request_handle:logCritical("debug value: " .. dvalue)
                  end 
                end                 
              end

              function envoy_on_response(response_handle)
                local headers = response_handle:headers()
                local headersMap = {}
                for key, value in pairs(headers) do
                  headersMap[key] = value
                end                
                response_handle:streamInfo():dynamicMetadata():set("envoy.lua","response_headers",headersMap)                    
                local responseBody = ""
                for chunk in response_handle:bodyChunks() do
                  if (chunk:length() > 0) then
                    responseBody = responseBody .. chunk:getBytes(0, chunk:length())
                  end
                end
                response_handle:streamInfo():dynamicMetadata():set("envoy.lua","response_body",responseBody)                  
              end
  - applyTo: CLUSTER
    match:
      context: SIDECAR_OUTBOUND
    patch:
      operation: ADD
      value: # cluster specification
        connect_timeout: 0.5s
        name: debugger_cluster
        type: STRICT_DNS  # static
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: debugger_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: scenario-recorder.debugger.svc.cluster.local
                    port_value: 8888